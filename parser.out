Created by PLY version 3.8 (http://www.dabeaz.com/ply)

Grammar

Rule 0     S' -> expr
Rule 1     expr -> term + expr
Rule 2     expr -> term
Rule 3     factor -> ( expr )
Rule 4     factor -> NUM
Rule 5     term -> factor * term
Rule 6     term -> factor

Terminals, with rules where they appear

(                    : 3
)                    : 3
*                    : 5
+                    : 1
NUM                  : 4
error                : 

Nonterminals, with rules where they appear

expr                 : 1 3 0
factor               : 5 6
term                 : 1 2 5

Parsing method: LALR

state 0

    (0) S' -> . expr
    (1) expr -> . term + expr
    (2) expr -> . term
    (5) term -> . factor * term
    (6) term -> . factor
    (3) factor -> . ( expr )
    (4) factor -> . NUM

    (               shift and go to state 2
    NUM             shift and go to state 3

    expr                           shift and go to state 4
    term                           shift and go to state 1
    factor                         shift and go to state 5

state 1

    (1) expr -> term . + expr
    (2) expr -> term .

    +               shift and go to state 6
    $end            reduce using rule 2 (expr -> term .)
    )               reduce using rule 2 (expr -> term .)


state 2

    (3) factor -> ( . expr )
    (1) expr -> . term + expr
    (2) expr -> . term
    (5) term -> . factor * term
    (6) term -> . factor
    (3) factor -> . ( expr )
    (4) factor -> . NUM

    (               shift and go to state 2
    NUM             shift and go to state 3

    expr                           shift and go to state 7
    term                           shift and go to state 1
    factor                         shift and go to state 5

state 3

    (4) factor -> NUM .

    *               reduce using rule 4 (factor -> NUM .)
    +               reduce using rule 4 (factor -> NUM .)
    )               reduce using rule 4 (factor -> NUM .)
    $end            reduce using rule 4 (factor -> NUM .)


state 4

    (0) S' -> expr .



state 5

    (5) term -> factor . * term
    (6) term -> factor .

    *               shift and go to state 8
    +               reduce using rule 6 (term -> factor .)
    $end            reduce using rule 6 (term -> factor .)
    )               reduce using rule 6 (term -> factor .)


state 6

    (1) expr -> term + . expr
    (1) expr -> . term + expr
    (2) expr -> . term
    (5) term -> . factor * term
    (6) term -> . factor
    (3) factor -> . ( expr )
    (4) factor -> . NUM

    (               shift and go to state 2
    NUM             shift and go to state 3

    expr                           shift and go to state 9
    term                           shift and go to state 1
    factor                         shift and go to state 5

state 7

    (3) factor -> ( expr . )

    )               shift and go to state 10


state 8

    (5) term -> factor * . term
    (5) term -> . factor * term
    (6) term -> . factor
    (3) factor -> . ( expr )
    (4) factor -> . NUM

    (               shift and go to state 2
    NUM             shift and go to state 3

    term                           shift and go to state 11
    factor                         shift and go to state 5

state 9

    (1) expr -> term + expr .

    $end            reduce using rule 1 (expr -> term + expr .)
    )               reduce using rule 1 (expr -> term + expr .)


state 10

    (3) factor -> ( expr ) .

    *               reduce using rule 3 (factor -> ( expr ) .)
    +               reduce using rule 3 (factor -> ( expr ) .)
    )               reduce using rule 3 (factor -> ( expr ) .)
    $end            reduce using rule 3 (factor -> ( expr ) .)


state 11

    (5) term -> factor * term .

    +               reduce using rule 5 (term -> factor * term .)
    $end            reduce using rule 5 (term -> factor * term .)
    )               reduce using rule 5 (term -> factor * term .)

